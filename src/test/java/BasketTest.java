/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.*;

public class BasketTest {

    private Basket basket;
    private HarryPotterBook firstHarryPocketBook;
    private HarryPotterBook secondHarryPocketBook;
    private HarryPotterBook thirdHarryPotterBook;
    private HarryPotterBook fourthHarryPotterBook;
    private HarryPotterBook fifthHarryPotterBook;

    @Before public void
    init() {
        basket = new Basket();
        firstHarryPocketBook = new HarryPotterBook(1);
        secondHarryPocketBook = new HarryPotterBook(2);
        thirdHarryPotterBook = new HarryPotterBook(3);
        fourthHarryPotterBook = new HarryPotterBook(4);
        fifthHarryPotterBook = new HarryPotterBook(5);
    }

    @Test public void shouldNotIncludeAnyBooksWhenCreated() {
        assertThat(basket.getBooks(), notNullValue());
        assertThat(basket.getBooks().size(), is(0));
    }

    @Test public void shouldIncludeAddedItems() {
        basket.add(firstHarryPocketBook);
        assertThat(basket.getBooks().size(), is(1));
        HarryPotterBook book = basket.getBooks().get(0);
        assertThat(book, equalTo(firstHarryPocketBook));
    }

    @Test public void shouldIncludeMultipleAddedItems() {
        basket.add(firstHarryPocketBook, secondHarryPocketBook);
        assertThat(basket.getBooks().size(), is(2));
    }

    @Test public void shouldHave0CostWhenEmpty() {
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(0))));
    }

    @Test public void shouldReturnTotalCostOfItsContents() {
        basket.add(firstHarryPocketBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(8))));
    }

    @Test public void shouldApply5DiscountForTwoDifferentBooks() {
        basket.add(firstHarryPocketBook, secondHarryPocketBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(15.20))));
    }

    @Test public void shouldApply10PercentDiscountForThreeDifferentBooks() {
        basket.add(firstHarryPocketBook, secondHarryPocketBook, thirdHarryPotterBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(21.60))));
    }

    @Test public void
    shouldNotApplyAnyDiscountForTwoIdenticalBooks() {
        basket.add(firstHarryPocketBook, firstHarryPocketBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(16.00))));
    }

    @Test public void
    shouldNotApplyAnyDiscountForThreeIdenticalBooks() {
        basket.add(new HarryPotterBook(5), new HarryPotterBook(5), new HarryPotterBook(5));
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(24.00))));
    }

    @Test public void
    shouldApply20percentDiscountForFourDistinctBooks() {
        basket.add(firstHarryPocketBook, secondHarryPocketBook, thirdHarryPotterBook, fourthHarryPotterBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(25.6))));
    }

    @Test public void
    shouldApply25percentDiscountForFiveDistinctBooks() {
        basket.add(firstHarryPocketBook, secondHarryPocketBook, thirdHarryPotterBook, fourthHarryPotterBook, fifthHarryPotterBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(30))));
    }

    @Test public void
    shouldApply25percentDiscountForTwoSeriesBoughtTogether() {
        for (int i = 0; i < 10; ++i) {
            basket.add(new HarryPotterBook((i % 5) + 1));
        }
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(60))));
    }

    @Test public void
    shouldApply20PercentDiscountAnd5PercentDiscount() {
        basket.add(new HarryPotterBook(1), new HarryPotterBook(2), new HarryPotterBook(3));
        basket.add(new HarryPotterBook(1), new HarryPotterBook(2));
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(36.8))));
    }

    @Test public void
    shouldApply20PercentDiscountTo3OutOf4DistinctBooks() {
        basket.add(firstHarryPocketBook, secondHarryPocketBook, thirdHarryPotterBook, thirdHarryPotterBook);
        assertThat(basket.totalCost(), equalTo(new Price(new BigDecimal(29.60))));
    }
}
